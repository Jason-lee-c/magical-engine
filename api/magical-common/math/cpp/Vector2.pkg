struct Vector2
{
public:
	float x, y;

public:
	static const Vector2 Zero;
	static const Vector2 One;
	static const Vector2 Right;
	static const Vector2 Left;
	static const Vector2 Up;
	static const Vector2 Down;
	static Vector2 var;

public:
	Vector2( float x, float y );
	Vector2( const Vector2& v );
	Vector2( void );
	~Vector2( void );
	
public:
	static inline Vector2 createZero( void );
	static inline Vector2 createOne( void );
	static inline Vector2 createFromVector3( const Vector3& v );
	static inline Vector2 createFromVector4( const Vector4& v );

	static inline void addScalar( Vector2& out, const Vector2& v, float a );
	static inline void add( Vector2& out, const Vector2& v1, const Vector2& v2 );
	static inline void subScalar( Vector2& out, const Vector2& v, float a );
	static inline void sub( Vector2& out, const Vector2& v1, const Vector2& v2 );
	static inline void mulScalar( Vector2& out, const Vector2& v, float a );
	static inline void mul( Vector2& out, const Vector2& v1, const Vector2& v2 );
	static inline void divScalar( Vector2& out, const Vector2& v, float a );
	static inline void div( Vector2& out, const Vector2& v1, const Vector2& v2 );
	static inline void clamp( Vector2& out, const Vector2& v, const Vector2& min, const Vector2& max );
	static inline void negate( Vector2& out, const Vector2& v );
	static inline void normalize( Vector2& out, const Vector2& v );
	static inline void rotate( Vector2& out, const Vector2& v, float angle );
	static inline void scale( Vector2& out, const Vector2& v, float s );
	static inline void midPointBetween( Vector2& out, const Vector2& v1, const Vector2& v2 );
	static inline void project( Vector2& out, const Vector2& v, const Vector2& n );

public:
	inline bool equals( const Vector2& v ) const;
	inline bool isZero( void ) const;
	inline bool isOne( void ) const;
	inline bool isNormalized( void ) const;
	inline bool operator==( const Vector2& v ) const;
	inline Vector2 operator+( void ) const;
	inline Vector2 operator+( float a ) const;
	inline Vector2 operator+( const Vector2& v ) const;
	inline Vector2 operator-( void ) const;
	inline Vector2 operator-( float a ) const;
	inline Vector2 operator-( const Vector2& v ) const;
	inline Vector2 operator*( float a ) const;
	inline Vector2 operator*( const Vector2& v ) const;
	inline Vector2 operator/( float a ) const;
	inline Vector2 operator/( const Vector2& v ) const;

public:
	inline void set( const Vector2& v );
	inline void setZero( void );
	inline void setOne( void );
	inline void setScalars( float x, float y );
	inline void fromVector3( const Vector3& v );
	inline void fromVector4( const Vector3& v );

public:
	inline void clamp( const Vector2& min, const Vector2& max );
	inline void negate( void );
	inline void normalize( void );
	inline void rotate( float angle );
	inline void scale( float s );
	inline Vector2 getClamped( const Vector2& min, const Vector2& max ) const;
	inline Vector2 getNegated( void ) const;
	inline Vector2 getNormalized( void ) const;
	inline Vector2 getRotated( float angle ) const;
	inline Vector2 getScaled( float s ) const;
	inline float dot( const Vector2& v ) const;
	inline float cross( const Vector2& v ) const;
	inline float distanceBetween( const Vector2& v ) const;
	inline float distanceBetweenSq( const Vector2& v ) const;
	inline float length( void ) const;
	inline float lengthSq( void ) const;
	inline float angleBetween( const Vector2& v ) const;
	inline Vector2 midPointBetween( const Vector2& v ) const;
	inline Vector2 project( const Vector2& n ) const;
};