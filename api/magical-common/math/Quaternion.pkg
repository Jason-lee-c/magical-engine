struct Quaternion
{
public:
	float x;
	float y;
	float z;
	float w;

public:
	Quaternion( float rx, float ry, float rz, float rw );
	Quaternion( const Quaternion& rhs );
	Quaternion( const Vec3& axis, float angle );
	Quaternion( void );

	inline Quaternion operator*( const Quaternion& rhs ) const;

	inline void fill( float rx, float ry, float rz, float rw );
	inline void fill( const Quaternion& rhs );
	inline void fillAxisAngle( const Vec3& axis, float angle );
	inline void fillIdentity( void );
	inline void fillZero( void );

	inline bool isIdentity( void ) const;
	inline bool isZero( void ) const;
	inline void negate( void );
	inline void inverse( void );
	inline void normalize( void );
	inline Vec3 axis( void ) const;
	inline float angle( void ) const;
	inline void lerp( const Quaternion& rhs, float t );
	inline void slerp( const Quaternion& rhs, float t );

public:
	static const Quaternion IDENTITY;
	static const Quaternion ZERO;
};

class Mathq4
{
public:
	static inline Quaternion mul( const Quaternion& lhs, const Quaternion& rhs );

	static inline Quaternion fill( float rx, float ry, float rz, float rw );
	static inline Quaternion fill( const Quaternion& rhs );
	static inline Quaternion fillAxisAngle( const Vec3& axis, float angle );
	static inline Quaternion fillIdentity( void );
	static inline Quaternion fillZero( void );

	static inline bool isIdentity( const Quaternion& lhs );
	static inline bool isZero( const Quaternion& lhs );
	static inline Quaternion negate( const Quaternion& lhs );
	static inline Quaternion inverse( const Quaternion& lhs );
	static inline Quaternion normalize( const Quaternion& lhs );
	static inline Vec3 axis( const Quaternion& lhs );
	static inline float angle( const Quaternion& lhs );
	static inline Quaternion lerp( const Quaternion& lhs, const Quaternion& rhs, float t );
	static inline Quaternion slerp( const Quaternion& lhs, const Quaternion& rhs, float t );
};