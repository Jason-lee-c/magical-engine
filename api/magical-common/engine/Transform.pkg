module Space
{
	enum Space
	{
		Self,
		Parent,
		World,
	};
}

class Transform : public Reference
{
public:
	virtual ~Transform( void );

public:
	static Transform* create( void );

public:
	void setName( const char* name );
	const std::string& getName( void ) const;

public:
	void addChild( const Transform* child );
	void removeChild( const Transform* child );
	void removeAllChildren( void );
	void removeFromParent( void );
	Transform* findChild( const char* name ) const;
	Transform* getChild( unsigned int index ) const;
	unsigned int childrenCount( void ) const;
	Transform* getParent( void ) const;
	bool isChildOf( const Transform* parent ) const;
	
public:
	void setPosition( const Vector2& t );
	void setPosition( const Vector3& t );
	void setPosition( float x, float y );
	void setPosition( float x, float y, float z );
	void translate( const Vector2& t, Space relative_to );
	void translate( const Vector3& t, Space relative_to );
	void translate( float x, float y, Space relative_to );
	void translate( float x, float y, float z, Space relative_to );
	const Vector3& getPosition( void ) const;

public:
	void setRotation( const EulerAngles& r );
	void setRotation( const Quaternion& r );
	void setRotation( float yaw, float pitch, float roll );
	void rotate( const EulerAngles& r, Space relative_to );
	void rotate( const Quaternion& r, Space relative_to );
	void rotate( float yaw, float pitch, float roll, Space relative_to );
	void yaw( float yaw, Space relative_to );
	void pitch( float pitch, Space relative_to );
	void roll( float roll, Space relative_to );
	const Quaternion& getRotation( void ) const;

public:
	void setScale( const Vector2& s );
	void setScale( const Vector3& s );
	void setScale( float x, float y );
	void setScale( float x, float y, float z );
	void scale( const Vector2& s );
	void scale( const Vector3& s );
	void scale( float x, float y );
	void scale( float x, float y, float z );
	void scale( float s );
	const Vector3& getScale( void ) const;

public:
	void lookAt( const Vector3& target, const Vector3& up );
	void resetTransform( void );
};